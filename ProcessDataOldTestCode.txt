 def preprocessSignalData(self, blue, green, red, grey, Irchannel):
        # Processed channel data
        processedBlue = blue
        processedGreen = green
        processedRed = red
        processedGrey = grey
        processedIR = Irchannel

        if (self.Preprocess_type == 3):
            processedBlue = self.preprocessdataType3(np.array(processedBlue), self.timecolorCount, True)
            processedGreen = self.preprocessdataType3(np.array(processedGreen), self.timecolorCount, True)
            processedRed = self.preprocessdataType3(np.array(processedRed), self.timecolorCount, True)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType3(np.array(processedGrey), self.timecolorCount, True)
            processedIR = self.preprocessdataType3(np.array(processedIR), self.timeirCount, True)

        elif (self.Preprocess_type == 6):##
            processedBlue = self.preprocessdataType3(np.array(processedBlue), self.timecolorCount, False)
            processedGreen = self.preprocessdataType3(np.array(processedGreen), self.timecolorCount, False)
            processedRed = self.preprocessdataType3(np.array(processedRed), self.timecolorCount, False)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType3(np.array(processedGrey), self.timecolorCount, False)
            processedIR = self.preprocessdataType3(np.array(processedIR), self.timeirCount, False)

        elif (self.Preprocess_type == 4):
            processedBlue = self.preprocessdataType4(np.array(processedBlue), self.timecolorCount, True)
            processedGreen = self.preprocessdataType4(np.array(processedGreen), self.timecolorCount, True)
            processedRed = self.preprocessdataType4(np.array(processedRed), self.timecolorCount, True)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType4(np.array(processedGrey), self.timecolorCount, True)
            processedIR = self.preprocessdataType4(np.array(processedIR), self.timeirCount, True)

        elif (self.Preprocess_type == 7):##
            processedBlue = self.preprocessdataType4(np.array(processedBlue), self.timecolorCount, False)
            processedGreen = self.preprocessdataType4(np.array(processedGreen), self.timecolorCount, False)
            processedRed = self.preprocessdataType4(np.array(processedRed), self.timecolorCount, False)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType4(np.array(processedGrey), self.timecolorCount, False)
            processedIR = self.preprocessdataType4(np.array(processedIR), self.timeirCount, False)

        elif (self.Preprocess_type == 5):
            # combine
            S = self.getSignalDataCombined(processedBlue, processedGreen, processedRed, processedGrey, processedIR)
            S = preprocessing.normalize(S)
            # split
            processedBlue = S[:, 0]
            processedGreen = S[:, 1]
            processedRed = S[:, 2]
            if (not self.ignoreGray):
                processedGrey = S[:, self.grayIndex]
            processedIR = S[:, self.IRIndex]

        # else:do nothing

        # Combine r,g,b,gy,ir in one array
        S = self.getSignalDataCombined(processedBlue, processedGreen, processedRed, processedGrey, processedIR)

        # generate PreProcessed plot
        if (self.GenerateGraphs):
            self.GenerateGrapth("PreProcessed", S[:, 0],S[:, 1],S[:, 2],S[:, self.grayIndex],S[:, self.IRIndex]) #TODO: FIX IF GRAY IS TO BE IGNORED

        return S
############################################################################
FPS:
  #
        # # Get FPS for IR
        # IRfpswithTime = {}
        # fpscountir = 0
        # isIRVariable =False
        # Prevlisttime = datetime.time(self.Frametime_list_ir[0].hour, self.Frametime_list_ir[0].minute,
        #                              self.Frametime_list_ir[0].second)
        # for time in self.Frametime_list_ir:
        #     TrimmedTime = datetime.time(time.hour, time.minute, time.second)
        #     if (Prevlisttime == TrimmedTime):
        #         fpscountir = fpscountir + 1
        #     else:
        #         IRfpswithTime[Prevlisttime] = fpscountir
        #         Prevlisttime = TrimmedTime
        #         fpscountir = 1
        #
        # # print
        # # print("IR fps:")
        # IRfps = 0
        # count = 0
        # for k, v in IRfpswithTime.items():
        #     if (count == 0):
        #         IRfps = str(v)
        #     else:
        #         if (IRfps != str(v)):
        #             isIRVariable = True
        #             break;
        #
        #     count=count+1
        #     # print('Time: ' + str(k) + ' , FPS: ' + str(v))
        #
        # IRFPS = self.getDuplicateValue(IRfpswithTime)
        #
        # self.IREstimatedFPS = IRFPS
 # Get FPS for color
        # ColorfpswithTime = {}
        # fpscountcolor = 0
        # isVariable = False
        # Prevlisttime = datetime.time(self.Frametime_list_color[0].hour, self.Frametime_list_color[0].minute,
        #                              self.Frametime_list_color[0].second)
        # for time in self.Frametime_list_color:
        #     TrimmedTime = datetime.time(time.hour, time.minute, time.second)
        #     if (Prevlisttime == TrimmedTime):
        #         fpscountcolor = fpscountcolor + 1
        #     else:
        #         ColorfpswithTime[Prevlisttime] = fpscountcolor
        #         Prevlisttime = TrimmedTime
        #         fpscountcolor = 1
        #
        # ColorFPS = self.getDuplicateValue(ColorfpswithTime)
        # self.ColorEstimatedFPS= ColorFPS

        # print
        # print("Color fps:")
        # Colorfps =0
        # count=0
        # for k, v in ColorfpswithTime.items():
        #     if(count ==0):
        #         Colorfps = str(v)
        #     else:
        #         if(Colorfps != str(v)):
        #             isVariable=True
        #             break;
        #
        #     count=count+1
            # print('Time: ' + str(k) + ' , FPS: ' + str(v))
        ####
        # print data acquistion time details
        # print('Start Time for Color:' + str(self.StartTime))
        # print('End Time for Color:' + str(self.EndTime))
        # print('Total Time:' + str(self.EndTime - self.StartTime))
#################################
other time calculations
 #
        # total_frames=0
        # for item in self.Frametime_list_color:
        #     total_frames = total_frames + 1
        #     frame_count = total_frames
        #     FPS = self.ColorEstimatedFPS
        #     td = datetime.timedelta(seconds=(frame_count / FPS))
        #     self.time_list_color.append(td)
        #
        #
        # timeDifference = (self.EndTime - self.StartTime)
        # self.totalTimeinSeconds = timeDifference.total_seconds()
        #
        # estimatedseconds = len(self.time_list_color) / self.ColorEstimatedFPS
        # if (self.totalTimeinSeconds > estimatedseconds):
        #     self.totalTimeinSeconds = estimatedseconds
        #
        # Timecount = 1
        # for time in self.time_list_color:
        #     self.timecolorCount.append(Timecount)
        #     Timecount = Timecount + 1
        # End
        # print('Color ROI loaded..')
        # #####################################
        #
        #
        # for time in self.Frametime_list_ir:
        #     # Add Time Stamp
        #     total_frames = total_frames + 1
        #     frame_count = total_frames
        #     FPS = self.IREstimatedFPS
        #     td = datetime.timedelta(seconds=(frame_count / FPS))
        #     self.time_list_ir.append(td)

        # print time details for ir
        # print('Start Time for IR:' + str(self.StartTime))
        # print('End Time for IR:' + str(self.EndTime))
        # print('Total Time:' + str(self.EndTime - self.StartTime))


             # Timecount = 1
        # for time in self.time_list_ir:
        #     self.timeirCount.append(Timecount)
        #     Timecount = Timecount + 1
        # End IR
        # print('IR ROI loaded..')


        ####rough work for testing
        # a = self.StartTime
        # b = self.EndTime
        lColor1 = self.Frametime_list_color[0]
        lIR1 = self.Frametime_list_ir[0]
        lColor = self.Frametime_list_color[len(self.Frametime_list_color)-1]
        lIR = self.Frametime_list_ir[len(self.Frametime_list_ir)-1]
        a=0
        # colorFirstIndex= list(ColorfpswithTime.items())[0]
        # irFirstIndex= list(IRfpswithTime.items())[0]
        # colorlastIndex= list(ColorfpswithTime.items())[-1]
        # # irlastIndex= list(IRfpswithTime.items())[-1]
        # return ColorfpswithTime, IRfpswithTime, isVariable, isIRVariable, ColorFPS, IRFPS


        ##########more fps checks
             # ColorfpswithTime, IRfpswithTime, isVariable, isIRVariable,  = self.getEstimatedFrame(objFaceImage,LoadDistancePath) #ColorFPS, IRFPS

        # ##If using single fps
        # if (ColorFPS != IRFPS):
        #     if(ColorFPS< IRFPS):
        #         estimatedfps = ColorFPS
        #     else:
        #         estimatedfps = IRFPS
        #     print('Color ' + str(ColorFPS) + ' and IR ' + str(IRFPS) + ' fps is different')
        # else:
        #     estimatedfps = ColorFPS



        ##### old process entire signal method which process signal as a single matrix

    def Process_EntireSignalData(self, IsEntireSignal=True):  # TODO : Implement without Gray
        #window data object
        windowList = Window_Data()
        windowList.LogTime(LogItems.Start_Total)
        windowList.isSmooth = self.isSmoothen

        blue = self.regionWindowSignalData[:, 0]
        green = self.regionWindowSignalData[:, 1]
        red = self.regionWindowSignalData[:, 2]
        grey = self.regionWindowSignalData[:, 3]
        Irchannel = self.regionWindowSignalData[:, 4]

        # Calculate samples
        self.NumSamples = len(grey)  # shd be channel ? TODO: FIX

        # Combine r,g,b,gy,ir in one array
        S = self.getSignalDataCombined(blue, green, red, grey, Irchannel)

        # if(not IsEntireSignal):
            #Claculate fps for this window
            # self.reCalculateFPS()

        self.StoreData(self, 'RawSignal', S, None, None, None)

        # generate raw data plot
        if (self.GenerateGraphs):
            self.GenerateGrapth("RawData", S[:, 0],S[:, 1],S[:, 2],S[:, self.grayIndex],S[:, self.IRIndex])

        #Log Start Time preprcessing signal data
        windowList.LogTime(LogItems.Start_PreProcess)
        # PreProcess Signal
        S = self.preprocessSignalData(S[:, 0], S[:, 1], S[:, 2], S[:, 3], S[:, 4])
        windowList.LogTime(LogItems.End_PreProcess)

        #Save
        self.WritetoDisk(self.SavePath + self.Window_count + '\\', 'objWindowProcessedData_RawSignal', S)

        # Apply Algorithm
        windowList.LogTime(LogItems.Start_Algorithm)
        S_ = self.ApplyAlgorithm(S)
        windowList.LogTime(LogItems.End_Algorithm)

        # Apply smoothen only before fft
        if (self.isSmoothen):
            # Smooth data
            windowList.LogTime(LogItems.Start_Smooth)
            S_ = self.SmoothenData(S_)
            windowList.LogTime(LogItems.End_Smooth)

        # Apply fft
        windowList.LogTime(LogItems.Start_FFT)
        S_fft, Colorfreq, IRfreq = self.ApplyFFT(S_)
        windowList.LogTime(LogItems.End_FFT)

        if (self.GenerateGraphs):
            self.GenerateGrapth("FFT",  S_fft[:, 0],S_fft[:, 1],S_fft[:, 2],S_fft[:, self.grayIndex],S_fft[:, self.IRIndex])

        windowList.LogTime(LogItems.Start_Filter)
        B_filtered, G_filtered, R_filtered, Gy_filtered, IR_filtered = self.FilterTechniques(S_fft[:, 0], S_fft[:, 1], S_fft[:, 2], S_fft[:, 3],
                                           S_fft[:, 4])  ##Applyfiltering
        windowList.LogTime(LogItems.End_Filter)

        if (self.GenerateGraphs):
            self.GenerateGrapth("Filtered",  B_filtered, G_filtered,R_filtered, Gy_filtered,IR_filtered)

        windowList.LogTime(LogItems.Start_ComputerHRSNR)
        self.generateHeartRateandSNR(B_filtered, G_filtered,R_filtered, Gy_filtered,IR_filtered,self.Result_type,self.HrType,self.isCompressed)
        windowList.LogTime(LogItems.End_ComputerHRSNR)

        #get best bpm and heart rate period in one region
        self.bestHeartRateSnr=0.0
        self.bestBpm=0.0
        self.GetBestBpm()

        # calculate SPO
        windowList.LogTime(LogItems.Start_SPO)
        std, err, oxylevl = self.getSpo(grey,Gy_filtered,Irchannel,red)
        windowList.LogTime(LogItems.End_SPO)

        windowList.LogTime(LogItems.End_Total)

        windowList.WindowNo = self.Window_count
        windowList.BestBPM = self.bestBpm
        windowList.BestSnR = self.bestHeartRateSnr
        windowList.IrSnr = self.IrSnr
        windowList.GreySnr = self.GreySnr
        windowList.RedSnr = self.RedSnr
        windowList.GreenSnr = self.GreenSnr
        windowList.BlueSnr = self.BlueSnr
        windowList.BlueBpm = self.BlueBpm
        windowList.IrBpm = self.IrBpm
        windowList.GreyBpm = self.GreyBpm
        windowList.RedBpm = self.RedBpm
        windowList.GreenBpm = self.GreenBpm
        windowList.regiontype = self.region
        windowList.IrFreqencySamplingError = self.IrFreqencySamplingError
        windowList.GreyFreqencySamplingError = self.GreyFreqencySamplingError
        windowList.RedFreqencySamplingError = self.RedFreqencySamplingError
        windowList.GreenFreqencySamplingError = self.GreenFreqencySamplingError
        windowList.BlueFreqencySamplingError = self.BlueFreqencySamplingError
        windowList.oxygenSaturationSTD = std  # std
        windowList.oxygenSaturationValueError = err  # err
        windowList.oxygenSaturationValueValue = oxylevl  # oxylevl
        windowList.timeDifferences()

        return windowList

####Combine



        # Combine r,g,b,gy,ir in one array
        S = self.getSignalDataCombined(blue, green, red, grey, Irchannel)


#######
IR IS VARIBALE
Colorfps =0
        count=0
        for k, v in ColorfpswithTime.items():
            if(count ==0):
                Colorfps = str(v)
            else:
                if(Colorfps != str(v)):
                    isVariable=True
                    break;

            count=count+1

        return ColorfpswithTime, IRfpswithTime, isVariable, isIRVariable, ColorFPS, IRFPS

################

        # Get FPS for IR

        isIRVariable =False
        Prevlisttime = datetime.time(self.Frametime_list_ir[0].hour, self.Frametime_list_ir[0].minute,
                                     self.Frametime_list_ir[0].second)
        for time in self.Frametime_list_ir:
            TrimmedTime = datetime.time(time.hour, time.minute, time.second)
            if (Prevlisttime == TrimmedTime):
                fpscountir = fpscountir + 1
            else:
                IRfpswithTime[Prevlisttime] = fpscountir
                Prevlisttime = TrimmedTime
                fpscountir = 1

        # print
        # print("IR fps:")
        IRfps = 0
        count = 0
        for k, v in IRfpswithTime.items():
            if (count == 0):
                IRfps = str(v)
            else:
                if (IRfps != str(v)):
                    isIRVariable = True
                    break;

            count=count+1
            # print('Time: ' + str(k) + ' , FPS: ' + str(v))

        IRFPS = self.getDuplicateValue(IRfpswithTime)

        self.IREstimatedFPS = IRFPS
##############
PREPROCESSING

        if (self.Preprocess_type == 3):
            processedBlue = self.preprocessdataType3(np.array(processedBlue), self.timecolorCount, True)
            processedGreen = self.preprocessdataType3(np.array(processedGreen), self.timecolorCount, True)
            processedRed = self.preprocessdataType3(np.array(processedRed), self.timecolorCount, True)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType3(np.array(processedGrey), self.timecolorCount, True)
            processedIR = self.preprocessdataType3(np.array(processedIR), self.timeirCount, True)

        elif (self.Preprocess_type == 6):##
            processedBlue = self.preprocessdataType3(np.array(processedBlue), self.timecolorCount, False)
            processedGreen = self.preprocessdataType3(np.array(processedGreen), self.timecolorCount, False)
            processedRed = self.preprocessdataType3(np.array(processedRed), self.timecolorCount, False)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType3(np.array(processedGrey), self.timecolorCount, False)
            processedIR = self.preprocessdataType3(np.array(processedIR), self.timeirCount, False)

        elif (self.Preprocess_type == 4):
            processedBlue = self.preprocessdataType4(np.array(processedBlue), self.timecolorCount, True)
            processedGreen = self.preprocessdataType4(np.array(processedGreen), self.timecolorCount, True)
            processedRed = self.preprocessdataType4(np.array(processedRed), self.timecolorCount, True)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType4(np.array(processedGrey), self.timecolorCount, True)
            processedIR = self.preprocessdataType4(np.array(processedIR), self.timeirCount, True)

        elif (self.Preprocess_type == 7):##
            processedBlue = self.preprocessdataType4(np.array(processedBlue), self.timecolorCount, False)
            processedGreen = self.preprocessdataType4(np.array(processedGreen), self.timecolorCount, False)
            processedRed = self.preprocessdataType4(np.array(processedRed), self.timecolorCount, False)
            if (not self.ignoreGray):
                processedGrey = self.preprocessdataType4(np.array(processedGrey), self.timecolorCount, False)
            processedIR = self.preprocessdataType4(np.array(processedIR), self.timeirCount, False)


 def preprocessdataType3(self, bufferArray, timecolorcountLips, isDetrend):
        """remove NaN and Inf values"""
        output = bufferArray[(np.isnan(bufferArray) == 0) & (np.isinf(bufferArray) == 0)]

        detrended_data = output

        if (isDetrend):
            detrended_data = signal.detrend(output)

        try:
            '''interpolation data buffer to make the signal become more periodic (advoid spectral leakage) '''
            L = len(detrended_data)
            even_times = np.linspace(timecolorcountLips[0], timecolorcountLips[-1], L)
            interp = np.interp(even_times, timecolorcountLips, detrended_data)
            interpolated_data = np.hamming(L) * interp
        except:
            interpolated_data = detrended_data

        '''removes noise'''
        # smoothed_data = signal.medfilt(interpolated_data, 15)
        # N = 3
        # """ x == an array of data. N == number of samples per average """
        # cumsum = np.cumsum(np.insert(interpolated_data, [0, 0, 0], 0))
        # rm = (cumsum[N:] - cumsum[:-N]) / float(N)

        '''normalize the input data buffer '''
        normalized_data = interpolated_data / np.linalg.norm(interpolated_data)
        # normalized_data_med = smoothed_data / np.linalg.norm(smoothed_data)
        return normalized_data

    def preprocessdataType4(self, bufferArray, timecolorcountLips, isDetrend):
        """remove NaN and Inf values"""
        output = bufferArray[(np.isnan(bufferArray) == 0) & (np.isinf(bufferArray) == 0)]

        detrended_data = output
        if (isDetrend):
            detrended_data = signal.detrend(output)

        try:
            '''interpolation data buffer to make the signal become more periodic (advoid spectral leakage) '''
            L = len(detrended_data)
            even_times = np.linspace(timecolorcountLips[0], timecolorcountLips[-1], L)
            interp = np.interp(even_times, timecolorcountLips, detrended_data)
            interpolated_data = np.hamming(L) * interp
        except:
            interpolated_data = detrended_data

        '''removes noise'''
        smoothed_data = signal.medfilt(interpolated_data, 15)
        # N = 3
        # """ x == an array of data. N == number of samples per average """
        # cumsum = np.cumsum(np.insert(interpolated_data, [0, 0, 0], 0))
        # rm = (cumsum[N:] - cumsum[:-N]) / float(N)

        '''normalize the input data buffer '''
        # normalized_data = interpolated_data / np.linalg.norm(interpolated_data)
        normalized_data_med = smoothed_data / np.linalg.norm(smoothed_data)
        return normalized_data_med

    def preprocessdataType2(self, processedChannel, isDetrend):
        processedChannel = np.array(processedChannel)
        Larray = len(processedChannel)
        if (isDetrend):
            processedChannel = signal.detrend(
                processedChannel)  # detrend the signal to avoid interference of light change
        even_times = np.linspace(self.timecolorCount[0], self.timecolorCount[-1],
                                 Larray)  # TODO: Fix time color count? instead of maual use other automatic method?
        interpolated = np.interp(even_times, self.timecolorCount, processedChannel)  # interpolation by 1
        interpolated = np.hamming(
            Larray) * interpolated  # make the signal become more periodic (advoid spectral leakage)
        processedChannel = interpolated / np.linalg.norm(interpolated)
        return processedChannel



        ##########

    def getLineSpace(self,signal):

        ##For Color
        signalL = len(signal)
        T = 1 / self.ColorEstimatedFPS  # sampling frequency
        max_time = signalL / self.ColorEstimatedFPS
        Colortx = np.linspace(0, max_time, signalL) #time_steps

        even_times = np.linspace(self.timecolorCount[0], self.timecolorCount[-1], signalL)
        even_times2 = np.linspace(signal[0], signal[-1], signalL)
        t=0


        # global data
        blue_fft_index = 0
        blue_fft_maxVal = 0
        green_fft_index = 0
        green_fft_maxVal = 0
        red_fft_index = 0
        red_fft_maxVal = 0
        grey_fft_index = 0
        grey_fft_maxVal = 0
        ir_fft_index = 0
        ir_fft_maxVal = 0

        ####generating data
          # ParticipantsProcessedHeartRateData[ParticipantsHRfileName] = ListHrdata
            # ParticipantsProcessedBloodOxygenData[ParticipantsSPOfileName] = ListSPOdata
            # print(str(algoType) +"_"+ str(fftype) +"_"+ str(filtertype)  +"_"+ str(resulttype)+
            #       "_" +  str(preprocesstype)  +"_"+  str(isSmooth)  +"_"+str(hrType)+"_" +
            #       str(isCompressed)  +"_"+ str(snrType))
            # objConfig.RunAnalysisForEntireSignalData, ROIStore, objConfig.SavePath, algoType, fftype, HrGr, SpoGr, filtertype, resulttype, preprocesstype, isSmooth,hrType,isCompressed,snrType
            # objConfig.Processed_participants_data[participant_number] =

        # Start generating data fo following types
        # for preprocesstype in self.objConfig.preprocesses:
        #     for algoType in self.objConfig.AlgoList:
        #         # Create path for each algorithm type to store results in
        #         # objFileIO.CreatePath(objConfig.SavePath + algoType)
        #         for fftype in self.objConfig.fftTypeList:
        #             for resulttype in self.objConfig.resulttypeList:
        #                 # for hrType in self.objConfig.hrTypeList:
        #                 for filtertype in self.objConfig.filtertypeList:
        #                     for isSmooth in self.objConfig.Smoothen:
        #                         #TODO: CHECK IF COMPRESSED are neccessary
        #                         # for isCompressed in self.objConfig.Compressed:
        #                         # for snrType in self.objConfig.SNRTypeList:
        #                         # Sort to list for writing to disk later
        #                         #+ "_HR-" + str(hrType)+ "_CP-" + str('None')
        #                         fileName = algoType + "_FFT-" + str(fftype) + "_FL-" + str(
        #                             filtertype) + "_RS-" + str(resulttype) + "_PR-" + str(preprocesstype) + "_SM-" + str(
        #                             isSmooth) #+ "_SNR-" + str(snrType) #isCompressed
        #                         print(fileName)
        #

            # Write all results to file
            # for k, v in ParticipantsProcessedHeartRateData.items():
            #     fileDetails = k.split('*')
            #     participantnumber = fileDetails[0]
            #     fileName = fileDetails[1]
            #     objFile.WriteListDatatoFile(objConfig.SavePath, fileName, v)
            #
            # for k, v in ParticipantsProcessedBloodOxygenData.items():
            #     fileDetails = k.split('*')
            #     participantnumber = fileDetails[0]
            #     fileName = fileDetails[1]
            #     objFile.WriteListDatatoFile(objConfig.SavePath, fileName, v)
            #
            # ParticipantsProcessedHeartRateData = {}
            # ParticipantsProcessedBloodOxygenData = {}


    """
    getEstimatedFrame:
    """
    def getEstimatedFrame(self, objFaceImage,distnacepath):
        ColorfpswithTime, IRfpswithTime, isVariable, isIRVariable = objFaceImage.GetEstimatedFPS(distnacepath) #, ColorFPS, IRFPS
        return ColorfpswithTime, IRfpswithTime, isVariable, isIRVariable #, ColorFPS, IRFPS

    def executeProgramOldMethod(self):
        # Check cases
        self.GenerateCases()
        currentParticipantId = ''
        for participant_number in self.objConfig.ParticipantNumbers:
            # for each heart rate status (resting or active)
            for position in self.objConfig.hearratestatus:
                print(participant_number + ', ' + position)
                currentParticipantId = ''

                # set path
                self.objConfig.setSavePath(participant_number, position, 'WindowProcessedData')

                for case in self.CaseList:
                    IsGenerated = self.CheckIfGenerated(case)
                    if (IsGenerated):
                        stop = True
                    else:
                        splitCase = case.split('_')
                        fileName = case
                        algoType = splitCase[0]
                        fftype = splitCase[1].replace('FFT-', '')
                        filtertype = int(splitCase[2].replace('FL-', ''))
                        resulttype = int(splitCase[3].replace('RS-', ''))
                        preprocesstype = int(splitCase[4].replace('PR-', ''))
                        isSmooth = splitCase[5].replace('SM-', '')
                        if (isSmooth == 'True'):
                            isSmooth = True
                        else:
                            isSmooth = False
                        # Gneerate
                        # Load all data for each roi and create roi store
                        if (currentParticipantId != participant_number):
                            currentParticipantId = participant_number
                            # estimatedfps = 0
                            totalTimeinSeconds = 0
                            for region in self.objConfig.roiregions:
                                # Init for each region
                                objFaceImage = LoadFaceData()
                                objFaceImage.Clear()

                                ##get ROI Store
                                totalTimeinSeconds = self.getData(participant_number, position, region, objFaceImage)

                                # objFaceImage.EstimatedFPS = estimatedfps
                                # delete face image object
                                del objFaceImage

                            # # Print FPS Detail
                            # print('ESTIMATED FPS USED: ' + str(estimatedfps))
                            # print(str(participant_number) + ', type= ' + str(position) + ' color min FPS: ' + str(
                            #     min(ColorfpswithTime.values())) + ' ' + str(isVariable) +
                            #       ', IR min FPS: ' + str(min(IRfpswithTime.values())) + ' ' + str(isIRVariable))

                        ###Get ground Truth
                        HrGr, SpoGr = CommonMethods.GetGroundTruth(participant_number, position,
                                                                   self.objConfig.DiskPath, int(totalTimeinSeconds))

                        ##Process and get result of participants data
                        self.GenerateResultsfromParticipants(participant_number, position, HrGr, SpoGr, fileName,
                                                             algoType, fftype, filtertype, resulttype, preprocesstype,
                                                             isSmooth)

                    stop = 0
##############################

            # if (v.IrSnr > bestHeartRateSnr):
            #     bestHeartRateSnr = v.IrSnr
            #     bestBpm = v.IrBpm
            #     channeltype = 'IR'
            #     regiontype = k
            #     freqencySamplingError = v.IrFreqencySamplingError
            #
            # if (v.GreySnr > bestHeartRateSnr):
            #     bestHeartRateSnr = v.GreySnr
            #     bestBpm = v.GreyBpm
            #     channeltype = 'Grey'
            #     regiontype = k
            #     freqencySamplingError = v.GreyFreqencySamplingError
            #
            # if (v.RedSnr > bestHeartRateSnr):
            #     bestHeartRateSnr = v.RedSnr
            #     bestBpm = v.RedBpm
            #     channeltype = 'Red'
            #     regiontype = k
            #     freqencySamplingError = v.RedFreqencySamplingError
            #
            # if (v.GreenSnr > bestHeartRateSnr):
            #     bestHeartRateSnr = v.GreenSnr
            #     bestBpm = v.GreenBpm
            #     channeltype = 'Green'
            #     regiontype = k
            #     freqencySamplingError = v.GreenFreqencySamplingError
            #
            # if (v.BlueSnr > bestHeartRateSnr):
            #     bestHeartRateSnr = v.BlueSnr
            #     bestBpm = v.BlueBpm
            #     channeltype = 'Blue'
            #     regiontype = k
            #     freqencySamplingError = v.BlueFreqencySamplingError